{"version":3,"file":"static/js/419.7ee356b4.chunk.js","mappings":"qLAIaA,E,MAAcC,GAAAA,OAAa,CACtCC,QCHsB,+BDItBC,OAAQ,CACNC,QCPmB,uC,qGCEVC,EAAUC,EAAAA,GAAAA,GAAH,4GAOPC,EAAcD,EAAAA,GAAAA,GAAH,4SAcXE,EAAoBF,EAAAA,GAAAA,IAAH,kG,SCnBjBG,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACP,EAAD,UACGK,EAAOG,KAAI,SAAAC,GACV,OACE,SAACP,EAAD,WACE,SAAC,KAAD,CAAMQ,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAhD,UACE,SAACH,EAAD,CACEW,IACEL,EAAMM,YACF,kCAAoCN,EAAMM,YAC1C,6EAENC,IAAI,QARQP,EAAME,W,oECTrBM,E,QAAYhB,GAAAA,GAAH,oHAIX,SAAAiB,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,W,6JCJlBC,EAAU,mCAAG,WAAMC,GAAN,gGAEC5B,EAAAA,EAAAA,IAAgB,gBAAiB,CACtDG,OAAQyB,IAHY,cAEhBC,EAFgB,yBAKfA,GALe,gCAOtBC,QAAQC,IAAR,MAPsB,yDAAH,sD,iDCEVC,EAAkB1B,EAAAA,GAAAA,IAAH,yHAOf2B,GAAa3B,EAAAA,EAAAA,IAAO4B,EAAAA,GAAP5B,CAAH,gSAYV6B,GAAkB7B,EAAAA,EAAAA,IAAO8B,EAAAA,GAAP9B,CAAH,0OAOjB,SAAAiB,GAAC,OAAIA,EAAEC,MAAMC,OAAOY,QAIlB,SAAAd,GAAC,OAAIA,EAAEC,MAAMC,OAAOY,QAIpBC,EAAgBhC,EAAAA,GAAAA,OAAH,oRAQf,SAAAiB,GAAC,OAAIA,EAAEC,MAAMC,OAAOY,QAIlB,SAAAd,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,UAIpBa,GAAoBjC,EAAAA,EAAAA,IAAOkC,EAAAA,IAAPlC,CAAH,yD,SCQ9B,EAhDe,WACb,OAAwCmC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,MAEAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACVC,EAAQ,UAAGN,EAAaO,IAAI,eAApB,QAA+B,GAC1B,KAAbD,GAGFrB,EAAW,CACTC,MAAOoB,EACPE,KAAM,IACLC,MAAK,SAAAC,GACNN,EAAgBM,EAAOC,KAAKC,cAG/B,CAACZ,IAOJ,OACE,UAACV,EAAD,YACE,SAAC,IAAD,uCACA,SAAC,KAAD,CACEuB,cAAe,CAAE3B,MAAO,IACxB4B,SAAU,SAAAC,IAVM,SAAAC,GACpB,IAAMC,EAA6B,KAAhBD,EAAM9B,MAAe,CAAEgC,KAAMF,EAAM9B,OAAU,GAChEe,EAAgBgB,GASVE,CAAcJ,IAHlB,UAME,UAACxB,EAAD,YACE,SAACE,EAAD,CACE2B,KAAK,OACLF,KAAK,QACLG,YAAY,qBAEd,SAACzB,EAAD,CAAewB,KAAK,SAApB,UACE,SAACvB,EAAD,YAIN,SAAC9B,EAAA,EAAD,CAAYC,OAAQmC","sources":["api/axios.js","constants/constants.js","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/common/MainTitle.styled.js","api/getKeyWord.js","pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\nimport { API_KEY } from 'constants/constants';\nimport { BASE_URL } from 'constants/constants';\n\nexport const customAxios = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n  },\n});\n","export const API_KEY = '39bf866453609a0bc24965bcd414ff90';\n\nexport const BASE_URL = 'https://api.themoviedb.org/3';\n","import styled from 'styled-components';\n\nexport const MovList = styled.ul`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  margin: -10px;\n`;\n\nexport const MovListItem = styled.li`\n  width: 240px;\n  margin: 10px;\n  border-radius: 12px;\n  box-shadow: 9px 9px 16px rgba(163, 177, 198, 0.6),\n    -9px -9px 16px rgba(255, 255, 255, 0.5);\n  overflow: hidden;\n  transition: transform 250ms ease-in-out;\n\n  :hover {\n    transform: translateY(-5px);\n  }\n`;\n\nexport const MovListItemPoster = styled.img`\n  display: block;\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { MovList, MovListItem, MovListItemPoster } from './MoviesList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <MovList>\n      {movies.map(movie => {\n        return (\n          <MovListItem key={movie.id}>\n            <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n              <MovListItemPoster\n                src={\n                  movie.poster_path\n                    ? 'https://image.tmdb.org/t/p/w300' + movie.poster_path\n                    : 'https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg'\n                }\n                alt=\"\"\n              />\n              {/* {movie.title} */}\n            </Link>\n          </MovListItem>\n        );\n      })}\n    </MovList>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const MainTitle = styled.h2`\n  margin-bottom: 20px;\n  text-align: center;\n  text-transform: uppercase;\n  color: ${p => p.theme.colors.accent};\n`;\n","import { customAxios } from './axios';\n\nexport const getKeyWord = async query => {\n  try {\n    const response = await customAxios.get('/search/movie', {\n      params: query,\n    });\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\nimport { RiSearchLine } from 'react-icons/ri';\n\nexport const MoviesContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const SearchForm = styled(Form)`\n  max-width: 350px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 20px;\n  border-radius: 15px;\n  overflow: hidden;\n  background-color: #dde1e7;\n  box-shadow: inset 2px 2px 5px #babecc, inset -5px -5px 10px #ffffff73;\n`;\n\nexport const SearchFormInput = styled(Field)`\n  box-sizing: border-box;\n  height: 100%;\n  width: 100%;\n  padding: 10px 20px;\n  outline: none;\n  border: none;\n  color: ${p => p.theme.colors.text};\n  background-color: transparent;\n\n  ::placeholder {\n    color: ${p => p.theme.colors.text};\n  }\n`;\n\nexport const SearchFormBtn = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 5px 10px;\n  border: none;\n  outline: none;\n  background-color: transparent;\n  color: ${p => p.theme.colors.text};\n  transition: color 250ms ease-in-out;\n\n  :hover {\n    color: ${p => p.theme.colors.accent};\n  }\n`;\n\nexport const SearchFormBtnIcon = styled(RiSearchLine)`\n  width: 25px;\n  height: 25px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport { getKeyWord } from 'api/getKeyWord';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { MainTitle } from 'components/common/MainTitle.styled';\nimport {\n  MoviesContainer,\n  SearchForm,\n  SearchFormInput,\n  SearchFormBtn,\n  SearchFormBtnIcon,\n} from './Movies.styled';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchResult, setSearchResult] = useState([]);\n\n  useEffect(() => {\n    let filmName = searchParams.get('name') ?? '';\n    if (filmName === '') {\n      return;\n    } else {\n      getKeyWord({\n        query: filmName,\n        page: 1,\n      }).then(result => {\n        setSearchResult(result.data.results);\n      });\n    }\n  }, [searchParams]);\n\n  const handlerSubmit = value => {\n    const nextParams = value.query !== '' ? { name: value.query } : {};\n    setSearchParams(nextParams);\n  };\n\n  return (\n    <MoviesContainer>\n      <MainTitle>search movie by keyword</MainTitle>\n      <Formik\n        initialValues={{ query: '' }}\n        onSubmit={values => {\n          handlerSubmit(values);\n        }}\n      >\n        <SearchForm>\n          <SearchFormInput\n            type=\"text\"\n            name=\"query\"\n            placeholder=\"Enter a keyword\"\n          />\n          <SearchFormBtn type=\"submit\">\n            <SearchFormBtnIcon />\n          </SearchFormBtn>\n        </SearchForm>\n      </Formik>\n      <MoviesList movies={searchResult} />\n    </MoviesContainer>\n  );\n};\n\nexport default Movies;\n"],"names":["customAxios","axios","baseURL","params","api_key","MovList","styled","MovListItem","MovListItemPoster","MoviesList","movies","location","useLocation","map","movie","to","id","state","from","src","poster_path","alt","MainTitle","p","theme","colors","accent","getKeyWord","query","response","console","log","MoviesContainer","SearchForm","Form","SearchFormInput","Field","text","SearchFormBtn","SearchFormBtnIcon","RiSearchLine","useSearchParams","searchParams","setSearchParams","useState","searchResult","setSearchResult","useEffect","filmName","get","page","then","result","data","results","initialValues","onSubmit","values","value","nextParams","name","handlerSubmit","type","placeholder"],"sourceRoot":""}